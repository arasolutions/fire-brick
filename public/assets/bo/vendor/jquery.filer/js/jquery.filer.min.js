!function (e) {
    "use strict";
    e.fn.filer = function (t) {
        return this.each(function (i, n) {
            var a = e(n), r = e(), l = e(), o = e(), s = [], d = e.extend(!0, {}, e.fn.filer.defaults, t), f = {
                init: function () {
                    a.wrap('<div class="jFiler"></div>'), r = a.closest(".jFiler"), f._changeInput()
                }, _bindInput: function () {
                    d.changeInput && l.size() > 0 && l.bind("click", f._clickHandler), a.on({
                        focus: function () {
                            l.addClass("focused")
                        }, blur: function () {
                            l.removeClass("focused")
                        }, change: function () {
                            f._onChange()
                        }
                    }), d.dragDrop && (l.length > 0 ? l : a).bind("drop", f._dragDrop.drop).bind("dragover", f._dragDrop.dragEnter).bind("dragleave", f._dragDrop.dragLeave), d.uploadFile && d.clipBoardPaste && e(window).on("paste", f._clipboardPaste)
                }, _unbindInput: function () {
                    d.changeInput && l.size() > 0 && l.unbind("click", f._clickHandler)
                }, _clickHandler: function () {
                    a.click()
                }, _applyAttrSettings: function () {
                    var e = ["name", "limit", "maxSize", "extensions", "changeInput", "showThumbs", "appendTo", "theme", "addMore", "excludeName", "files"];
                    for (var t in e) {
                        var i = "data-jfiler-" + e[t];
                        if (f._assets.hasAttr(i)) {
                            switch (e[t]) {
                                case"changeInput":
                                case"showThumbs":
                                case"addMore":
                                    d[e[t]] = ["true", "false"].indexOf(a.attr(i)) > -1 ? "true" == a.attr(i) : a.attr(i);
                                    break;
                                case"extensions":
                                    d[e[t]] = a.attr(i).replace(/ /g, "").split(",");
                                    break;
                                case"files":
                                    d[e[t]] = JSON.parse(a.attr(i));
                                    break;
                                default:
                                    d[e[t]] = a.attr(i)
                            }
                            a.removeAttr(i)
                        }
                    }
                }, _changeInput: function () {
                    if (f._applyAttrSettings(), d.theme && r.addClass("jFiler-theme-" + d.theme), "input" != a.get(0).tagName.toLowerCase() && "file" != a.get(0).type) l = a, (a = e('<input type="file" name="' + d.name + '" />')).css({
                        position: "absolute",
                        left: "-9999px",
                        top: "-9999px",
                        "z-index": "-9999"
                    }), r.prepend(a), f._isGn = a; else if (d.changeInput) {
                        switch (typeof d.changeInput) {
                            case"boolean":
                                l = e('<div class="jFiler-input"><div class="jFiler-input-caption"><span>' + d.captions.feedback + '</span></div><div class="jFiler-input-button">' + d.captions.button + '</div></div>"');
                                break;
                            case"string":
                            case"object":
                                l = e(d.changeInput);
                                break;
                            case"function":
                                l = e(d.changeInput(r, a, d))
                        }
                        a.after(l), a.css({position: "absolute", left: "-9999px", top: "-9999px", "z-index": "-9999"})
                    }
                    (!d.limit || d.limit && d.limit >= 2) && (a.attr("multiple", "multiple"), "[]" != a.attr("name").slice(-2) && a.attr("name", a.attr("name") + "[]")), f._bindInput(), d.files && f._append(!1, {files: d.files})
                }, _clear: function () {
                    f.files = null, d.uploadFile || d.addMore || f._reset(), f._set("feedback", f._itFl && f._itFl.length > 0 ? f._itFl.length + " " + d.captions.feedback2 : d.captions.feedback), null != d.onEmpty && "function" == typeof d.onEmpty && d.onEmpty(r, l, a)
                }, _reset: function (t) {
                    if (!t) {
                        if (!d.uploadFile && d.addMore) {
                            for (var i = 0; i < s.length; i++) s[i].remove();
                            s = [], f._unbindInput(), a = f._isGn ? f._isGn : e(n), f._bindInput()
                        }
                        f._set("input", "")
                    }
                    f._itFl = [], f._itFc = null, f._ajFc = 0, f._prEr || (f._itFr = [], r.find("input[name^='jfiler-items-exclude-']:hidden").remove()), o.fadeOut("fast", function () {
                        e(this).remove()
                    }), o = e()
                }, _set: function (e, t) {
                    switch (e) {
                        case"input":
                            a.val("");
                            break;
                        case"feedback":
                            l.length > 0 && l.find(".jFiler-input-caption span").html(t)
                    }
                }, _filesCheck: function () {
                    for (var t = 0, i = 0; i < f.files.length; i++) {
                        var n = f.files[i].name.split(".").pop().toLowerCase(), a = f.files[i], r = {
                            name: a.name,
                            size: a.size,
                            size2: f._assets.bytesToSize(a.size),
                            type: a.type,
                            ext: n
                        };
                        if (null != d.extensions && -1 == e.inArray(n, d.extensions)) return alert(f._assets.textParse(d.captions.errors.filesType, r)), !1;
                        if (null != d.maxSize && f.files[i].size > 1048576 * d.maxSize) return alert(f._assets.textParse(d.captions.errors.filesSize, r)), !1;
                        if (4096 == a.size && 0 == a.type.length) return !1;
                        t += f.files[i].size
                    }
                    if (null != d.maxSize && t >= Math.round(1048576 * d.maxSize)) return alert(f._assets.textParse(d.captions.errors.filesSizeAll)), !1;
                    if ((d.addMore || d.uploadFile) && (r = f._itFl.filter(function (e) {
                        return !(e.file.name != a.name || e.file.size != a.size || e.file.type != a.type || a.lastModified && e.file.lastModified != a.lastModified) || void 0
                    })).length > 0) return !1;
                    return !0
                }, _thumbCreator: {
                    create: function (t) {
                        var i = f.files[t], n = f._itFc ? f._itFc.id : t, a = i.name, r = i.size,
                            l = i.type.split("/", 1).toString().toLowerCase(),
                            s = -1 != a.indexOf(".") ? a.split(".").pop().toLowerCase() : "",
                            u = d.uploadFile ? '<div class="jFiler-jProgressBar">' + d.templates.progressBar + "</div>" : "",
                            p = {
                                id: n,
                                name: a,
                                size: r,
                                size2: f._assets.bytesToSize(r),
                                type: l,
                                extension: s,
                                icon: f._assets.getIcon(s, l),
                                icon2: f._thumbCreator.generateIcon({type: l, extension: s}),
                                image: '<div class="jFiler-item-thumb-image fi-loading"></div>',
                                progressBar: u,
                                _appended: i._appended
                            }, c = "";
                        return i.opts && (p = e.extend({}, i.opts, p)), (c = e(f._thumbCreator.renderContent(p)).attr("data-jfiler-index", n)).get(0).jfiler_id = n, f._thumbCreator.renderFile(i, c, p), i.forList ? c : (f._itFc.html = c, c.hide()[d.templates.itemAppendToEnd ? "appendTo" : "prependTo"](o.find(d.templates._selectors.list)).show(), void (i._appended || f._onSelect(t)))
                    }, renderContent: function (e) {
                        return f._assets.textParse(e._appended ? d.templates.itemAppend : d.templates.item, e)
                    }, renderFile: function (t, i, n) {
                        if (0 == i.find(".jFiler-item-thumb-image").size()) return !1;
                        if (t.file && "image" == n.type) {
                            var a = '<img src="' + t.file + '" draggable="false" />',
                                r = i.find(".jFiler-item-thumb-image.fi-loading");
                            return e(a).error(function () {
                                a = f._thumbCreator.generateIcon(n), i.addClass("jFiler-no-thumbnail"), r.removeClass("fi-loading").html(a)
                            }).load(function () {
                                r.removeClass("fi-loading").html(a)
                            }), !0
                        }
                        if (window.File && window.FileList && window.FileReader && "image" == n.type && n.size < 6e6) {
                            var l = new FileReader;
                            l.onload = function (t) {
                                var a = '<img src="' + t.target.result + '" draggable="false" />',
                                    r = i.find(".jFiler-item-thumb-image.fi-loading");
                                e(a).error(function () {
                                    a = f._thumbCreator.generateIcon(n), i.addClass("jFiler-no-thumbnail"), r.removeClass("fi-loading").html(a)
                                }).load(function () {
                                    r.removeClass("fi-loading").html(a)
                                })
                            }, l.readAsDataURL(t)
                        } else {
                            a = f._thumbCreator.generateIcon(n), r = i.find(".jFiler-item-thumb-image.fi-loading");
                            i.addClass("jFiler-no-thumbnail"), r.removeClass("fi-loading").html(a)
                        }
                    }, generateIcon: function (t) {
                        var i = new Array(3);
                        if (t && t.type && t.extension) switch (t.type) {
                            case"image":
                                i[0] = "f-image", i[1] = '<i class="icon-jfi-file-image"></i>';
                                break;
                            case"video":
                                i[0] = "f-video", i[1] = '<i class="icon-jfi-file-video"></i>';
                                break;
                            case"audio":
                                i[0] = "f-audio", i[1] = '<i class="icon-jfi-file-audio"></i>';
                                break;
                            default:
                                i[0] = "f-file f-file-ext-" + t.extension, i[1] = t.extension.length > 0 ? "." + t.extension : "", i[2] = 1
                        } else i[0] = "f-file", i[1] = t.extension && t.extension.length > 0 ? "." + t.extension : "", i[2] = 1;
                        var n = '<span class="jFiler-icon-file ' + i[0] + '">' + i[1] + "</span>";
                        if (1 == i[2]) {
                            var a = f._assets.text2Color(t.extension);
                            if (a) {
                                var r = e(n).appendTo("body"), l = r.css("box-shadow");
                                l = a + l.substring(l.replace(/^.*(rgba?\([^)]+\)).*$/, "$1").length, l.length), r.css({
                                    "-webkit-box-shadow": l,
                                    "-moz-box-shadow": l,
                                    "box-shadow": l
                                }).attr("style", "-webkit-box-shadow: " + l + "; -moz-box-shadow: " + l + "; box-shadow: " + l + ";"), n = r.prop("outerHTML"), r.remove()
                            }
                        }
                        return n
                    }, _box: function (t) {
                        if (null != d.beforeShow && "function" == typeof d.beforeShow && !d.beforeShow(f.files, o, r, l, a)) return !1;
                        if (o.length < 1) {
                            if (d.appendTo) var i = e(d.appendTo); else i = r;
                            i.find(".jFiler-items").remove(), (o = e('<div class="jFiler-items jFiler-row"></div>')).append(f._assets.textParse(d.templates.box)).appendTo(i), o.on("click", d.templates._selectors.remove, function (i) {
                                i.preventDefault(), (!d.templates.removeConfirmation || confirm(d.captions.removeConfirmation)) && f._remove(t ? t.remove.event : i, t ? t.remove.el : e(this).closest(d.templates._selectors.item))
                            })
                        }
                        for (var n = 0; n < f.files.length; n++) f.files[n]._appended || (f.files[n]._choosed = !0), f._addToMemory(n), f._thumbCreator.create(n)
                    }
                }, _upload: function () {
                    var t = f._itFc.html, i = new FormData;
                    if (i.append(a.attr("name"), f._itFc.file, !!f._itFc.file.name && f._itFc.file.name), null != d.uploadFile.data && e.isPlainObject(d.uploadFile.data)) for (var n in d.uploadFile.data) i.append(n, d.uploadFile.data[n]);
                    f._ajax.send(t, i, f._itFc)
                }, _ajax: {
                    send: function (t, i, n) {
                        return n.ajax = e.ajax({
                            url: d.uploadFile.url,
                            data: i,
                            type: d.uploadFile.type,
                            enctype: d.uploadFile.enctype,
                            xhr: function () {
                                var i = e.ajaxSettings.xhr();
                                return i.upload && i.upload.addEventListener("progress", function (e) {
                                    f._ajax.progressHandling(e, t)
                                }, !1), i
                            },
                            complete: function (e, t) {
                                n.ajax = !1, f._ajFc++, f._ajFc >= f.files.length && (f._ajFc = 0, null != d.uploadFile.onComplete && "function" == typeof d.uploadFile.onComplete && d.uploadFile.onComplete(o, r, l, a, e, t))
                            },
                            beforeSend: function (e, i) {
                                return null == d.uploadFile.beforeSend || "function" != typeof d.uploadFile.beforeSend || d.uploadFile.beforeSend(t, o, r, l, a, n.id, e, i)
                            },
                            success: function (e, i, s) {
                                n.uploaded = !0, null != d.uploadFile.success && "function" == typeof d.uploadFile.success && d.uploadFile.success(e, t, o, r, l, a, n.id, i, s)
                            },
                            error: function (e, i, s) {
                                n.uploaded = !1, null != d.uploadFile.error && "function" == typeof d.uploadFile.error && d.uploadFile.error(t, o, r, l, a, n.id, e, i, s)
                            },
                            statusCode: d.uploadFile.statusCode,
                            cache: !1,
                            contentType: !1,
                            processData: !1
                        }), n.ajax
                    }, progressHandling: function (e, t) {
                        if (e.lengthComputable) {
                            var i = Math.round(100 * e.loaded / e.total).toString();
                            null != d.uploadFile.onProgress && "function" == typeof d.uploadFile.onProgress && d.uploadFile.onProgress(i, t, o, r, l, a), t.find(".jFiler-jProgressBar").find(d.templates._selectors.progressBar).css("width", i + "%")
                        }
                    }
                }, _dragDrop: {
                    dragEnter: function (e) {
                        e.preventDefault(), e.stopPropagation(), r.addClass("dragged"), f._set("feedback", d.captions.drop), null != d.dragDrop.dragEnter && "function" == typeof d.dragDrop.dragEnter && d.dragDrop.dragEnter(e, l, a, r)
                    }, dragLeave: function (e) {
                        return e.preventDefault(), e.stopPropagation(), !!f._dragDrop._dragLeaveCheck(e) && (r.removeClass("dragged"), f._set("feedback", d.captions.feedback), void (null != d.dragDrop.dragLeave && "function" == typeof d.dragDrop.dragLeave && d.dragDrop.dragLeave(e, l, a, r)))
                    }, drop: function (e) {
                        e.preventDefault(), r.removeClass("dragged"), !e.originalEvent.dataTransfer.files || e.originalEvent.dataTransfer.files.length <= 0 || (f._set("feedback", d.captions.feedback), f._onChange(e, e.originalEvent.dataTransfer.files), null != d.dragDrop.drop && "function" == typeof d.dragDrop.drop && d.dragDrop.drop(e.originalEvent.dataTransfer.files, e, l, a, r))
                    }, _dragLeaveCheck: function (t) {
                        var i = t.relatedTarget, n = !1;
                        return i === l || (i && (n = e.contains(l, i)), !n)
                    }
                }, _clipboardPaste: function (e, t) {
                    if ((t || e.originalEvent.clipboardData || e.originalEvent.clipboardData.items) && (!t || e.originalEvent.dataTransfer || e.originalEvent.dataTransfer.items) && !f._clPsePre) {
                        var i = t ? e.originalEvent.dataTransfer.items : e.originalEvent.clipboardData.items,
                            n = function (e, t, i) {
                                t = t || "", i = i || 512;
                                for (var n = atob(e), a = [], r = 0; r < n.length; r += i) {
                                    for (var l = n.slice(r, r + i), o = new Array(l.length), s = 0; s < l.length; s++) o[s] = l.charCodeAt(s);
                                    var d = new Uint8Array(o);
                                    a.push(d)
                                }
                                return new Blob(a, {type: t})
                            };
                        if (i) for (var a = 0; a < i.length; a++) if (-1 !== i[a].type.indexOf("image") || -1 !== i[a].type.indexOf("text/uri-list")) {
                            if (t) try {
                                window.atob(e.originalEvent.dataTransfer.getData("text/uri-list").toString().split(",")[1])
                            } catch (e) {
                                return
                            }
                            var r = t ? n(e.originalEvent.dataTransfer.getData("text/uri-list").toString().split(",")[1], "image/png") : i[a].getAsFile();
                            r.name = Math.random().toString(36).substring(5), r.name += -1 != r.type.indexOf("/") ? "." + r.type.split("/")[1].toString().toLowerCase() : ".png", f._onChange(e, [r]), f._clPsePre = setTimeout(function () {
                                delete f._clPsePre
                            }, 1e3)
                        }
                    }
                }, _onSelect: function (t) {
                    d.uploadFile && !e.isEmptyObject(d.uploadFile) && f._upload(t), null != d.onSelect && "function" == typeof d.onSelect && d.onSelect(f.files[t], f._itFc.html, o, r, l, a), t + 1 >= f.files.length && null != d.afterShow && "function" == typeof d.afterShow && d.afterShow(o, r, l, a)
                }, _onChange: function (t, i) {
                    if (i) {
                        if (!i || 0 == i.length) return f._set("input", ""), f._clear(), !1;
                        f.files = i
                    } else {
                        if (!a.get(0).files || void 0 === a.get(0).files || 0 == a.get(0).files.length) return d.uploadFile || d.addMore || (f._set("input", ""), f._clear()), !1;
                        f.files = a.get(0).files
                    }
                    if (d.uploadFile || d.addMore || f._reset(!0), !f._filesCheck()) return f._set("input", ""), f._clear(), !1;
                    if (f._set("feedback", f.files.length + f._itFl.length + " " + d.captions.feedback2), d.showThumbs) f._thumbCreator._box(); else for (var n = 0; n < f.files.length; n++) f.files[n]._choosed = !0, f._addToMemory(n), f._onSelect(n);
                    if (!d.uploadFile && d.addMore) {
                        var r = e('<input type="file" />'), l = a.prop("attributes");
                        e.each(l, function () {
                            r.attr(this.name, this.value)
                        }), a.after(r), f._unbindInput(), s.push(r), a = r, f._bindInput()
                    }
                }, _append: function (e, t) {
                    var i = !!t && t.files;
                    if (i && !(i.length <= 0) && (f.files = i, d.showThumbs)) {
                        for (var n = 0; n < f.files.length; n++) f.files[n]._appended = !0;
                        f._thumbCreator._box()
                    }
                }, _getList: function (e, t) {
                    var i = !!t && t.files;
                    if (i && !(i.length <= 0) && (f.files = i, d.showThumbs)) {
                        for (var n = [], s = 0; s < f.files.length; s++) f.files[s].forList = !0, n.push(f._thumbCreator.create(s));
                        t.callback && t.callback(n, o, r, l, a)
                    }
                }, _retryUpload: function (t, i) {
                    var n = parseInt("object" == typeof i ? i.attr("data-jfiler-index") : i),
                        a = f._itFl.filter(function (e) {
                            return e.id == n
                        });
                    return a.length > 0 && (!d.uploadFile || e.isEmptyObject(d.uploadFile) || a[0].uploaded ? void 0 : (f._itFc = a[0], f._upload(n), !0))
                }, _remove: function (t, n) {
                    if (n.binded) {
                        if (n.data.id && 0 == (n = o.find(d.templates._selectors.item + "[data-jfiler-index='" + n.data.id + "']")).size()) return !1;
                        n.data.el && (n = n.data.el)
                    }
                    var s = n.get(0).jfiler_id || n.attr("data-jfiler-index"), u = null, p = function (t) {
                        var n = r.find("input[name^='jfiler-items-exclude-']:hidden").first(), l = f._itFl[t], o = [];
                        if (0 == n.size() && (n = e('<input type="hidden" name="jfiler-items-exclude-' + (d.excludeName ? d.excludeName : ("[]" != a.attr("name").slice(-2) ? a.attr("name") : a.attr("name").substring(0, a.attr("name").length - 2)) + "-" + i) + '">')).appendTo(r), l.file._choosed || l.file._appended || l.uploaded) {
                            if (f._prEr = !0, f._itFr.push(l), d.addMore) {
                                var s = l.input, u = 0;
                                f._itFl.filter(function (e) {
                                    e.file._choosed && e.input.get(0) == s.get(0) && u++
                                }), 1 == u && (f._itFr = f._itFr.filter(function (e) {
                                    return !e.file._choosed || e.input.get(0) != s.get(0)
                                }), s.val(""), f._prEr = !1)
                            }
                            for (var p = 0; p < f._itFr.length; p++) o.push(f._itFr[p].file.name);
                            o = JSON.stringify(o), n.val(o)
                        }
                    }, c = function (t, i) {
                        p(i), f._itFl.splice(i, 1), f._itFl.length < 1 ? (f._reset(), f._clear()) : f._set("feedback", f._itFl.length + " " + d.captions.feedback2), t.fadeOut("fast", function () {
                            e(this).remove()
                        })
                    };
                    for (var g in f._itFl) "length" !== g && f._itFl.hasOwnProperty(g) && f._itFl[g].id == s && (u = g);
                    return !!f._itFl.hasOwnProperty(u) && (f._itFl[u].ajax ? (f._itFl[u].ajax.abort(), void c(n, u)) : (null != d.onRemove && "function" == typeof d.onRemove && d.onRemove(n, f._itFl[u].file, u, o, r, l, a), void c(n, u)))
                }, _addToMemory: function (t) {
                    f._itFl.push({
                        id: f._itFl.length,
                        file: f.files[t],
                        html: e(),
                        ajax: !1,
                        uploaded: !1
                    }), d.addMore && !f.files[t]._appended && (f._itFl[f._itFl.length - 1].input = a), f._itFc = f._itFl[f._itFl.length - 1]
                }, _assets: {
                    bytesToSize: function (e) {
                        if (0 == e) return "0 Byte";
                        var t = Math.floor(Math.log(e) / Math.log(1e3));
                        return (e / Math.pow(1e3, t)).toPrecision(3) + " " + ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"][t]
                    }, hasAttr: function (e, t) {
                        var i = (t = t || a).attr(e);
                        return !(!i || void 0 === i)
                    }, getIcon: function (t, i) {
                        return e.inArray(i, ["audio", "image", "text", "video"]) > -1 ? '<i class="icon-jfi-file-' + i + " jfi-file-ext-" + t + '"></i>' : '<i class="icon-jfi-file-o jfi-file-type-' + i + " jfi-file-ext-" + t + '"></i>'
                    }, textParse: function (t, i) {
                        switch (i = e.extend({}, {
                            limit: d.limit,
                            maxSize: d.maxSize
                        }, i && e.isPlainObject(i) ? i : {}), typeof t) {
                            case"string":
                                return t.replace(/\{\{fi-(.*?)\}\}/g, function (e, t) {
                                    return (t = t.replace(/ /g, "")).match(/(.*?)\|limitTo\:(\d+)/) ? t.replace(/(.*?)\|limitTo\:(\d+)/, function (e, t, n) {
                                        var a = (t = i[t] ? i[t] : "").substring(0, n);
                                        return t.length > a.length ? a.substring(0, a.length - 3) + "..." : a
                                    }) : i[t] ? i[t] : ""
                                });
                            case"function":
                                return t(i);
                            default:
                                return t
                        }
                    }, text2Color: function (e) {
                        if (!e || 0 == e.length) return !1;
                        for (var t = 0, i = 0; t < e.length; i = e.charCodeAt(t++) + ((i << 5) - i)) ;
                        t = 0;
                        for (var n = "#"; 3 > t; n += ("00" + (i >> 2 * t++ & 255).toString(16)).slice(-2)) ;
                        return n
                    }
                }, files: null, _itFl: [], _itFc: null, _itFr: [], _ajFc: 0, _prEr: !1
            };
            return f.init(), a.on("filer.append", function (e, t) {
                f._append(e, t)
            }), a.on("filer.remove", function (e, t) {
                t.binded = !0, f._remove(e, t)
            }), a.on("filer.reset", function () {
                return f._reset(), f._clear(), !0
            }), a.on("filer.generateList", function (e, t) {
                return f._getList(e, t)
            }), a.on("filer.retry", function (e, t) {
                return f._retryUpload(e, t)
            }), this
        })
    }, e.fn.filer.defaults = {
        limit: null,
        maxSize: null,
        extensions: null,
        changeInput: !0,
        showThumbs: !1,
        appendTo: null,
        theme: null,
        templates: {
            box: null,
            item: null,
            itemAppend: null,
            progressBar: null,
            itemAppendToEnd: !1,
            removeConfirmation: !0,
            _selectors: {list: null, item: null, progressBar: null, remove: null}
        },
        files: null,
        uploadFile: null,
        dragDrop: null,
        addMore: !1,
        clipBoardPaste: !0,
        excludeName: null,
        beforeShow: null,
        onSelect: null,
        afterShow: null,
        onRemove: null,
        onEmpty: null,
        captions: {
            button: "Choose Files",
            feedback: "Choose files To Upload",
            feedback2: "files were chosen",
            drop: "Drop file here to Upload",
            removeConfirmation: "Are you sure you want to remove this file?",
            errors: {
                filesLimit: "Only {{fi-limit}} files are allowed to be uploaded.",
                filesType: "Only Images are allowed to be uploaded.",
                filesSize: "{{fi-name}} is too large! Please upload file up to {{fi-maxSize}} MB.",
                filesSizeAll: "Files you've choosed are too large! Please upload files up to {{fi-maxSize}} MB."
            }
        }
    }
}(jQuery);